package _201909

import (
	"testing"
)

//  n（1 ≤ n ≤ 30）
func Test_countAndSay(t *testing.T) {
	tests := []struct {
		name string
		n    int
		want string
	}{
		{"1", 1, "1"},
		{"2", 4, "1211"},
		{"3", 30, "31131122211311123113321112131221123113111231121113311211131221121321131211132221" +
			"1231131122111213122112311311222112111331121113112221121113122113121113222112132113213221232112111312111" +
			"2133221123113112221131112212211131221121321131211132221123113112221131112311332211211133112111311222112" +
			"1113122113111231133221121113122113121113222123211211131211121332211213211321322113311213211322132112311" +
			"3213221121113122123211211131221222112112322211231131122211311123113321112132132112211131221131211132221" +
			"1213211321322123211211131211121332211231131122211311123113321112131221123113111231121123222112111331121" +
			"1131122211211131221131112311332211211131221131211132211121312211231131112311211232221121113122113121113" +
			"2221232112111312111213111213211231132132211211131221232112111312212221121123222112132113213221133112132" +
			"1231231121113112221121321132132211322132113213221123113112221133112132123222112111312211312112213211231" +
			"1321322112111312211312113221133211322112211213322112311311222113111231133211121312211231131112311211133" +
			"1121113122112132113121113222112311311221112131221123113112221121113311211131122211211131221131211132221" +
			"1213211321223112111311222112132113213221133122211311221122111312211312111322212321121113121112131112132" +
			"1123113213221121113122123211211131221222112112322211213211321322113311213212312311211131122211213211321" +
			"3221132213211321322112311311222113311213212322211211131221131211221321123113213221121113122113121132211" +
			"3321132211221121332211213211321322113311213212312311211131122211213211331121321123123211231131122211211" +
			"1312211311123113322112132113212231121113112221121321132132211231232112311321322112311311222113111231133" +
			"2211211131221131211132211121312211231131112311211232221121321132132211331221122311311222112111312211311" +
			"1231133221121321132132211331222113321112131122211332113221122112133221123113112221131112311332111213122" +
			"1123113111231121113311211131221121321131211132221123113112211121312211231131122211211133112111311222112" +
			"1113122113121113222112132113213221232112111312111213322112311311222113111231133211121312211231131112311" +
			"2112322211322311311222113111231133211121312211231131112311211232221121113122113121113222123211211131221" +
			"1322111312211213211312111322211231131122111213122112311311221132211221121332211213211321322113311213212" +
			"3123112111312111312212231131122211311123113322112111312211312111322111213122112311311123112112322211213" +
			"2113213221133112132123123112111312211322311211133112111312211213211311123113223112111321322123122113222" +
			"1222112112322211211131221131211132221232112111312111213111213211231132132211211131221232112111312211213" +
			"1112131221121321132132211231131122211331121321232221121113122113121122132112311321322112111312211312111" +
			"3222112131112131221121321131211132221121321132132211331121321232221123113112221131112311322311211131122" +
			"2112132113311213211221121332211211131221131211132221231122212213211321322112311311222113311213212322211" +
			"2111312211312111322212321121113121112133221121311121312211213211312111322211213211321322123211211131211" +
			"1213322112132113213221133112132123123112111311222112132113311213211221121332211231131122211311123113321" +
			"1121312211231131122211322311311222112111312211311123113322112132113212231121113112221121321132122211322" +
			"2122211211232221121113122113121113222123211211131211121311121321123113111231131122112213211321322113311" +
			"2132123222112311311222113111231132231121113112221121321133112132112211213322112111312211312111322212321" +
			"1211131211121311121321123113213221121113122123211211131221222112112322211213111213122112132113121113222" +
			"1121321132132212321121113121112133221121321132132211331121321132213211231132132211211131221232112111312" +
			"2122211211232221121321132132211331121321231231121113112221121321133112132112312321123113112221121113122" +
			"1131112311332211213211321223112111311222112132113212221132221222112112322211231131122211311123113321112" +
			"1312211231131112311211133112111312211213211312111322211231131122111213122112311311222112111331121113112" +
			"2211211131221131211132221121321132132212321121113121112133221123113112221131112311332111213213211221113" +
			"1221131211132221121321132132212321121113121112133221121321132132211331121321231231121113122113223112111" +
			"3311211131221222112112322211213211321322113311213212322211322311311222113111231133211121312211231131112" +
			"3112112322211211131221131211132221232112111312111213111213211231132132211211131221131211221321123113213" +
			"2211231131122211311122113222123222112311311222113221113122113121113222112132113213221133112132113311211" +
			"13122122211211132213211231131122212322211331222113112211"},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			if got := countAndSay(tt.n); got != tt.want {
				t.Errorf("countAndSay() = %v, want %v", got, tt.want)
			}
		})
	}
}
